{
   "scratchpaper" : {
      "stdout" : "2\n4\nnil\n",
      "stderr" : "\u001B[35mType Error: Type 'num' is not compatible with 'str'\u001B[0m\n"
   },
   "empty" : {
      "stdout" : "ok\n",
      "stderr" : ""
   },
   "block_scope" : {
      "stdout" : "inner\nouter\n",
      "stderr" : ""
   },
   "assignment_grouping": {
      "stdout" : "",
      "stderr" : "\u001B[33m[line 2] Error at '<-': Invalid assignment target.\u001B[0m\n"
   },
   "nil_1": {
      "stdout" : "nil\nHello\n<fn test\\emp>\nnil\n",
      "stderr" : "\u001B[35m[line 10] Type Error: Type 'num' is not assignable to type 'emp'.\u001B[0m\n"
   },
   "nil_2": {
      "stdout" : "<fn test\\emp>\n",
      "stderr" : "\u001B[35m[line 5] Type Error: Function 'test' does not return a value of type emp.\u001B[0m\n"
   },
   "type_checking_1": {
      "stdout" : "1\nHello\ntrue\n",
      "stderr" : "\u001B[35m[line 7] Type Error: Type 'str' is not assignable to type 'boo'.\u001B[0m\n"
   },
   "type_checking_2": {
      "stdout" : "",
      "stderr" : "\u001B[35m[line 1] Type Error: Type 'str' is not assignable to type 'num'.\u001B[0m\n"
   },
   "return": {
      "stdout" : "Hello\nWorld\nHello\n",
      "stderr" : ""
   },
   "function_argument_checking_1": {
      "stdout" : "1\nHello\nfalse\nnil\n",
      "stderr" : "\u001B[35m[line 17] Type Error: Type 'num' is not compatible with 'str'.\u001B[0m\n"
   },
   "function_argument_checking_2": {
      "stdout" : "1\n",
      "stderr" : "\u001B[35m[line 14] Type Error: Type 'str' is not compatible with 'num'.\u001B[0m\n"
   },
   "or_and_eval": {
      "stdout" : "true\n1\nfalse\nnil\n",
      "stderr" : ""
   },
   "bool_equality": {
      "stdout" : "true\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "stderr" : ""
   },
   "not": {
      "stdout" : "false\ntrue\ntrue\n-1\n",
      "stderr" : ""
   },
   "if": {
      "stdout" : "good\nblock\ntrue\n",
      "stderr" : ""
   },
   "for": {
      "stdout" : "0\n1\n2\n3\n",
      "stderr" : ""
   },
   "in": {
      "stdout" : ["0\n", "1\n", "2\n", "3\n", "4\n", "5\n", "6\n", "7\n", "8\n", "9\n"],
      "stderr" : ["", "", "", "", "", "", "", "", "", ""]
   },
   "argument": {
      "stdout" : ["test/argument.mlang\nhello\n", "test/argument.mlang\n"],
      "stderr" : ["", "\u001B[34m[line 2] Index 1 out of range in argument list.\u001B[0m\n"]
   },
   "multiple_scrnout": {
      "stdout": "1\n2\n3\n4\n",
      "stderr": ""
   },
   "any_type": {
      "stdout": "1\nHello\nHello\ntrue\n",
      "stderr": ""
   }

}